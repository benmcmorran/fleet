cmake_minimum_required(VERSION 3.10)
project(fleet CXX)

macro(assert_defined)
    foreach(name ${ARGV})
        if(NOT DEFINED ${name})
            message(FATAL_ERROR "${name} must be defined.")
        endif()
    endforeach()
endmacro()

assert_defined(PROJECT_TYPE TU_COUNT)

if(PROJECT_TYPE STREQUAL "flat")
    foreach(UNIQUE_ID RANGE ${TU_COUNT})
        set(FILENAME source_${UNIQUE_ID}.cpp)
        configure_file(flat_source.cpp.in ${FILENAME})
        list(APPEND SOURCES ${FILENAME})
    endforeach()
    add_library(benchmark ${SOURCES})
elseif(PROJECT_TYPE STREQUAL "multiproject")
    assert_defined(PROJECT_COUNT)
    math(EXPR TU_COUNT_PER_PROJECT "${TU_COUNT} / ${PROJECT_COUNT}")
    message(STATUS "Generating ${TU_COUNT_PER_PROJECT} TUs per project")
    foreach(PROJECT_ID RANGE ${PROJECT_COUNT})
        set(SOURCES)
        set(PROJECT_PATH "Project${PROJECT_ID}")
        foreach(UNIQUE_ID RANGE ${TU_COUNT_PER_PROJECT})
            set(TU_PATH ${PROJECT_PATH}/source_${UNIQUE_ID}.cpp)
            configure_file(flat_source.cpp.in ${TU_PATH})
            list(APPEND SOURCES ${TU_PATH})
        endforeach()
        add_library(${PROJECT_PATH} ${SOURCES})
    endforeach()    
else()
    message(FATAL_ERROR "Unknown project type.")
endif()